# Python program for implementation of Insertion Sort 
n= int(input())
a=[int(i) for i in input().split()]
m = [int(i) for i in range(0,n)]
def merge(arr, l, m, r,p):
    n1 = m - l + 1
    n2 = r- m
 
    # create temp arrays
    L = [0] * (n1)
    R = [0] * (n2)
    Lx = [0] * (n1)
    Rx = [0] * (n2)
    # Copy data to temp arrays L[] and R[]
    for i in range(0 , n1):
        L[i] = arr[l + i]
        Lx[i] = p[l + i]
    for j in range(0 , n2):
        R[j] = arr[m + 1 + j]
        Rx[j] = p[m + 1 + j]
 
    i = 0     # Initial index of first subarray
    j = 0     # Initial index of second subarray
    k = l     # Initial index of merged subarray
 
    while i < n1 and j < n2 :
        if L[i] <= R[j]:
            arr[k] = L[i]
            p[k] = Lx[i]
            i += 1
        else:
            arr[k] = R[j]
            p[k] = Rx[j]
            j += 1
        k += 1
 
    # Copy the remaining elements of L[], if there
    # are any
    while i < n1:
        arr[k] = L[i]
        p[k] = Lx[i]
        i += 1
        k += 1
 
    # Copy the remaining elements of R[], if there
    # are any
    while j < n2:
        arr[k] = R[j]
        p[k] = Rx[j]
        j += 1
        k += 1
 
# l is for left index and r is right index of the
# sub-array of arr to be sorted
def mergeSort(arr,l,r,p):
    if l < r:
 
        # Same as (l+r)//2, but avoids overflow for
        # large l and h
        m = (l+(r-1))//2
 
        # Sort first and second halves
        mergeSort(arr, l, m,p)
        mergeSort(arr, m+1, r,p)
        merge(arr, l, m, r,p)
 
mergeSort(a,0,len(a)-1,m)

for i in range(len(a)):
    print(a[i],end =" ")